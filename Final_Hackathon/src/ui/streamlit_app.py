import os
import sys
import streamlit as st

# Th√™m th∆∞ m·ª•c src v√†o sys.path ƒë·ªÉ import llm
MODULE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if MODULE_PATH not in sys.path:
    sys.path.append(MODULE_PATH)

from llm.streaming_llm import stream_chat_completion

# Kh·ªüi t·∫°o session state cho chat
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Xin ch√†o! H√£y nh·∫≠p c√¢u h·ªèi v·ªÅ d·ªØ li·ªáu t√†i ch√≠nh."}
    ]

st.set_page_config(page_title="ü§ñ AI EDINET Chatbot", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ AI Agent EDINET")
st.markdown("Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh EDINET theo th·ªùi gian th·ª±c qua streaming response.")

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Nh·∫≠n input m·ªõi
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi..."):
    # 1. Hi·ªÉn th·ªã ngay tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)
    # 2. L∆∞u v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})

    # 3. Khung assistant ƒë·ªÉ stream response
    with st.chat_message("assistant"):
        # Chu·∫©n b·ªã payload cho LLM
        payload = [
            {"role": m["role"], "content": m["content"]}
            for m in st.session_state.messages
        ]
        answer = ""
        placeholder = st.empty()
        # Stream tokens v√† c·∫≠p nh·∫≠t d·∫ßn
        for token in stream_chat_completion(payload):
            if token:
                answer += token
                placeholder.markdown(answer)
        # L∆∞u ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß
        st.session_state.messages.append({"role": "assistant", "content": answer})
